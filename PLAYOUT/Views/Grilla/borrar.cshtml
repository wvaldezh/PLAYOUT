@model PLAYOUT.Models.ViewModels.Borrar

<div class="video-player">
    <video id="videoPlayer" width="320" height="240" controls autoplay muted>
        <source id="videoSource" src="@Model.musicalesbo.FirstOrDefault()?.Direccion" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>
<div id="canal-info">
    <!-- Aquí se mostrará la información del canal -->
</div>

@section Scripts {
    <script>
        /*
        // bloke 1 inicio
        var videoPlayer = document.getElementById("videoPlayer");
        var videoSource = document.getElementById("videoSource");

        // Convertir el modelo en una lista de URLs de videos en JavaScript
        var videos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.musicalesbo.Select(v => v.Direccion).ToList()));
        var currentIndex = 0;

        // Función para cargar y reproducir el siguiente video
        function playNextVideo() {
            currentIndex++;
            if (currentIndex >= videos.length) {
                currentIndex = 0; // Volver al primer video si se alcanzó el final de la lista
            }
            videoSource.src = videos[currentIndex];
            videoPlayer.load();
            videoPlayer.play();
            videoPlayer.muted = false;
        }

        // Evento para reproducir el siguiente video cuando termine el actual
        videoPlayer.addEventListener("ended", playNextVideo);
        //bloke 1 fin 
        */
       //bloke 2 inicio
        var videoPlayer = document.getElementById("videoPlayer");
        var videoSource = document.getElementById("videoSource");

        // Lista de URLs de videos en JavaScript
        var videos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.musicalesbo.Select(v => v.Direccion).ToList()));
        var currentIndex = 0;

        // Función para cargar y reproducir el siguiente video
        function playNextVideo() {
            currentIndex++;
            if (currentIndex >= videos.length) {
                currentIndex = 0;
            }
            videoSource.src = videos[currentIndex];
            videoPlayer.load();
            videoPlayer.play();
        }

        // Evento para reproducir el siguiente video cuando termine el actual
        videoPlayer.addEventListener("ended", playNextVideo);

        // Guardar estado de video y tiempo en localStorage
        window.addEventListener("beforeunload", function () {
            localStorage.setItem('currentVideoIndex', currentIndex);
            localStorage.setItem('videoTime', videoPlayer.currentTime);
        });

        // Restaurar estado del video al recargar la página
        window.addEventListener("load", function () {
            var savedIndex = localStorage.getItem('currentVideoIndex');
            var savedTime = localStorage.getItem('videoTime');

            if (savedIndex !== null) {
                currentIndex = parseInt(savedIndex);
                videoSource.src = videos[currentIndex];
                videoPlayer.load();
                if (savedTime !== null) {
                    videoPlayer.currentTime = parseFloat(savedTime);
                }
                videoPlayer.play();
            }
        });

       //bloke 2 fin

        // Script para mostrar grilla

        var canales = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.canalViewModels));
        var currentIndex = 0;

        function mostrarCanal() {
            var canal = canales[currentIndex];

            var html = `
                        <div>
                            <img src="${canal.LogoUrl}" alt="${canal.Nombre}" style="width: 100px;" />
                            <h2>${canal.Nombre}</h2>
                            <ul>
                                ${canal.Programas.map(p => `
                                    <li>${new Date(p.HoraDeEmision).toLocaleTimeString()} - ${p.TituloDePrograma}</li>
                                `).join('')}
                            </ul>
                        </div>
                    `;

            document.getElementById("canal-info").innerHTML = html;

            currentIndex++;
            if (currentIndex >= canales.length) {
                currentIndex = 0;
            }
        }

        mostrarCanal();
        setInterval(mostrarCanal, 10000); // Cambiar de canal cada 30 segundos
    </script>
   
}

<style>
    .video-player {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background-color: #000;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
    }
</style>
