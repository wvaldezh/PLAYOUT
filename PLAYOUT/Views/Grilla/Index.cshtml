@model PLAYOUT.Models.ViewModels.CanalPrograma

<!-- Incluir el reproductor de video 
<div>
    @{
        <partial name ="_VideoMusPlayerb"/>
    }
</div>
-->
<div class="video-player">
    <video id="videoPlayer" width="320" height="240" controls autoplay muted>
        <source id="videoSource" src="@Model.musicales.FirstOrDefault()?.Direccion" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

<!-- Otros contenidos de la vista -->

@{
    ViewData["Title"] = "Programación del Canal";
    var currentIndex = ViewBag.CurrentIndex as int?;
    var canalesCount = ViewBag.CanalesCount as int?;
}

<tr>
    <td>@ViewData["Title"]</td>
    <img src="@Model.Direccion" class="img-circle" alt="Cinque Terre" width="200" height="150">

</tr>

<table class="table">

    <thead>
        <tr>
            <th>Canal</th>
            <th>Hora</th>
            <th>Título</th>
        </tr>
    </thead>
    <tbody>
        
        @foreach (var programa in Model.programacions)
        {
            <tr>
                <td>@programa.CanalName</td>
                <td>@programa.Hora.ToString("HH:mm")</td>
                <td>@programa.Programa</td>
            </tr>
        }
    </tbody>
</table>
<div>
    @Html.Partial("_MiPrimeraVistaParcial")
</div>
<script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () {
            var currentIndex = @currentIndex;
            var canalesCount = @canalesCount;
            var nextIndex = (currentIndex + 1) % canalesCount;
            window.location.href = '@Url.Action("Index", "Grilla")' + '?index=' + nextIndex;
        }, 30000); // 30 segundos = 30000 ms
    });

  // script de los videos musicales

    var videoPlayer = document.getElementById("videoPlayer");
    var videoSource = document.getElementById("videoSource");

    // Lista de URLs de videos en JavaScript
    var videos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.musicales.Select(v => v.Direccion).ToList()));
    var currentIndex = 0;

    // Función para cargar y reproducir el siguiente video
    function playNextVideo() {
        currentIndex++;
        if (currentIndex >= videos.length) {
            currentIndex = 0;
        }
        videoSource.src = videos[currentIndex];
        videoPlayer.load();
        videoPlayer.play();
    }

    // Evento para reproducir el siguiente video cuando termine el actual
    videoPlayer.addEventListener("ended", playNextVideo);

    // Guardar estado de video y tiempo en localStorage
    window.addEventListener("beforeunload", function () {
        localStorage.setItem('currentVideoIndex', currentIndex);
        localStorage.setItem('videoTime', videoPlayer.currentTime);
    });

    // Restaurar estado del video al recargar la página
    window.addEventListener("load", function () {
        var savedIndex = localStorage.getItem('currentVideoIndex');
        var savedTime = localStorage.getItem('videoTime');

        if (savedIndex !== null) {
            currentIndex = parseInt(savedIndex);
            videoSource.src = videos[currentIndex];
            videoPlayer.load();
            if (savedTime !== null) {
                videoPlayer.currentTime = parseFloat(savedTime);
            }
            videoPlayer.play();
        }
    });



</script>
<style>
    .video-player {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background-color: #000;
        padding: 5px;
        border-radius: 5px;
    }
</style>