@model PLAYOUT.Models.ViewModels.Borrar

<div id="canal-info">
    <!-- Aquí se cargará la información del canal dinámicamente -->
</div>

<div class="video-player">
    <video id="videoPlayer" width="800" height="300" controls autoplay>
        <source id="videoSource" src="@Model.musicalesbo.FirstOrDefault()?.Direccion" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

@section Scripts {
    <script>
        var canales = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.canalViewModels));
        var currentCanalIndex = 0;
        //console.log(canales);

        function mostrarCanal(canal) {
            if (canal && canal.programas && canal.programas.length > 0) {
                var html = `
                    <div>
                        <img src="${canal.logoUrl}" alt="${canal.nombre}" style="width: 100px;" />
                        <h2>${canal.nombre}</h2>
                        <ul>
                            ${canal.programas.map(p => `
                                <li>${new Date(p.horaDeEmision).toLocaleTimeString()}  - ${p.tituloDePrograma}</li>
                                    `).join('')}
                        </ul>
                    </div>
                `;
            } else {
                // Manejo en caso de que no haya programas para mostrar
                var html = `
                    <div>
                        <img src="${canal.logoUrl}" alt="${canal.nombre}" style="width: 100px;" />
                        <h2>${canal.nombre}</h2>
                        <p>No hay programación disponible.</p>
                    </div>
                `;
            }

            document.getElementById("canal-info").innerHTML = html;
        }

        function cargarCanal() {
            var canalId = canales[currentCanalIndex].CanalID;
            //console.log(canalId);

            $.getJSON('/Grilla/ObtenerCanalProgramacion', { canalId: canalId }, function (data,jsonStatus,jqHXR) {
                console.log(data);
                console.log(jsonStatus);
                console.log(jqHXR);
                mostrarCanal(data);
               // console.log(data);
                currentCanalIndex++;
                if (currentCanalIndex >= canales.length) {
                    currentCanalIndex = 0;
                }
            });
        }

        $(document).ready(function () {
            cargarCanal(); // Cargar el primer canal al cargar la página
            setInterval(cargarCanal, 30000); // Cambiar de canal cada 30 segundos
        });
        //bloke 2 inicio
        var videoPlayer = document.getElementById("videoPlayer");
        var videoSource = document.getElementById("videoSource");

        // Lista de URLs de videos en JavaScript
        var videos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.musicalesbo.Select(v => v.Direccion).ToList()));
        var currentIndex = 0;

        // Función para cargar y reproducir el siguiente video
        function playNextVideo() {
            currentIndex++;
            if (currentIndex >= videos.length) {
                currentIndex = 0;
            }
            videoSource.src = videos[currentIndex];
            videoPlayer.load();
            videoPlayer.play();
        }

        // Evento para reproducir el siguiente video cuando termine el actual
        videoPlayer.addEventListener("ended", playNextVideo);

        // Guardar estado de video y tiempo en localStorage
        window.addEventListener("beforeunload", function () {
            localStorage.setItem('currentVideoIndex', currentIndex);
            localStorage.setItem('videoTime', videoPlayer.currentTime);
        });

        // Restaurar estado del video al recargar la página
        window.addEventListener("load", function () {
            var savedIndex = localStorage.getItem('currentVideoIndex');
            var savedTime = localStorage.getItem('videoTime');

            if (savedIndex !== null) {
                currentIndex = parseInt(savedIndex);
                videoSource.src = videos[currentIndex];
                videoPlayer.load();
                if (savedTime !== null) {
                    videoPlayer.currentTime = parseFloat(savedTime);
                }
                videoPlayer.play();
            }
        });

               //bloke 2 fin
    </script>
}
<style>
    .video-player {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background-color: #000;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
    }
</style>


