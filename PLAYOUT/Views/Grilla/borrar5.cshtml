@model PLAYOUT.Models.ViewModels.Borrar

<div id="canal-info">
    <!-- Aquí se cargará la información del canal dinámicamente -->
</div>

<div class="video-player">
    <video id="videoPlayer" width="800" height="300" controls autoplay muted playsinline>
        <source id="videoSource" src="@Model.musicalesbo.FirstOrDefault()?.Direccion" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>
<div class="container-fluid">
    <h1>My First Bootstrap Page</h1>
    <p>This is some text.</p>
</div>

@section Scripts {
    <script>
        var canales = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.canalViewModels));
        var currentCanalIndex = 0;
        //console.log(canales);

        function mostrarCanal(canal) {
            if (canal && canal.programas && canal.programas.length > 0) {
                //BLOQUE ANIMACION TEXTO INICIO
                // Iteramos sobre los textos recibidos y los añadimos a la vista
                canal.programas.forEach(function (programa) {
                    var $programaTexto = $('<div class="programa-texto"></div>').text(programa);
                    $('.programa-container').append($programaTexto);
                });

                // Aplicar la lógica de desplazamiento a cada texto
                $('.programa-texto').each(function () {
                    var $programaTexto = $(this);
                    var containerWidth = $('.programa-container').width();
                    var textoWidth = $programaTexto.width();

                    if (textoWidth > containerWidth) {
                        $programaTexto.addClass('scrolling');
                        var distance = textoWidth + containerWidth;

                        function scrollText() {
                            $programaTexto.animate({ left: -distance }, textoWidth * 10, 'linear', function () {
                                $programaTexto.css('left', containerWidth);
                                scrollText();
                            });
                        }

                        scrollText();
                    } else {
                        $programaTexto.css('left', '0'); // Alinear el texto si no necesita desplazarse
                    }
                });
            },
            error: function (xhr, status, error) {
                console.error("Error al obtener los programas: ", error);
            }
                //BLOQUE ANIMACION TEXTO FIN
                var html = `
                        <div id= "cabecera">
                                        <img src="${canal.logoUrl}" alt="${canal.nombre}" style="width: 300px; height="120"; />
                               <h2>${canal.nombre}</h2>
                        </div>
                        <div class="grilla">
                                     <div >
                                     <h1>HORA</h1>
                                            ${canal.programas.map(p => `
                                                                                                                                                       <div  >        <div class="programa-texto" id="programaTexto" > ${new Date(p.horaDeEmision).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div></div>
                                            `).join('')}
                              </div>
                                              <div class="programa-container" >
                                            
                             </div>
                         </div>
                                `;
            } else {
                // Manejo en caso de que no haya programas para mostrar
                var html = `
                                    <div>
                                        <img src="${canal.logoUrl}" alt="${canal.nombre}" style="width: 100px;" />
                                        <h2>${canal.nombre}</h2>
                                        <p>No hay programación disponible.</p>
                                    </div>
                                `;
            }

            document.getElementById("canal-info").innerHTML = html;
        }

        function cargarCanal() {
            var canalId = canales[currentCanalIndex].CanalID;
            //console.log(canalId);

            $.getJSON('/Grilla/ObtenerCanalProgramacion', { canalId: canalId }, function (data, jsonStatus, jqHXR) {
                console.log(data);
                console.log(jsonStatus);
                console.log(jqHXR);
                mostrarCanal(data);
                // console.log(data);
                currentCanalIndex++;
                if (currentCanalIndex >= canales.length) {
                    currentCanalIndex = 0;
                }
            });
        }

        $(document).ready(function () {
            cargarCanal(); // Cargar el primer canal al cargar la página
            setInterval(cargarCanal, 30000); // Cambiar de canal cada 30 segundos
       

        });
        //bloke 2 inicio
        var videoPlayer = document.getElementById("videoPlayer");
        var videoSource = document.getElementById("videoSource");

        // Lista de URLs de videos en JavaScript
        var videos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.musicalesbo.Select(v => v.Direccion).ToList()));
        var currentIndex = 0;

        // Función para cargar y reproducir el siguiente video
        function playNextVideo() {
            currentIndex++;
            if (currentIndex >= videos.length) {
                currentIndex = 0;
            }
            videoSource.src = videos[currentIndex];
            videoPlayer.load();
            videoPlayer.play();
        }

        // Evento para reproducir el siguiente video cuando termine el actual
        videoPlayer.addEventListener("ended", playNextVideo);

        // Guardar estado de video y tiempo en localStorage
        window.addEventListener("beforeunload", function () {
            localStorage.setItem('currentVideoIndex', currentIndex);
            localStorage.setItem('videoTime', videoPlayer.currentTime);
        });

        // Restaurar estado del video al recargar la página
        window.addEventListener("load", function () {
            var savedIndex = localStorage.getItem('currentVideoIndex');
            var savedTime = localStorage.getItem('videoTime');

            if (savedIndex !== null) {
                currentIndex = parseInt(savedIndex);
                videoSource.src = videos[currentIndex];
                videoPlayer.load();
                if (savedTime !== null) {
                    videoPlayer.currentTime = parseFloat(savedTime);
                }
                videoPlayer.play();
            }
        });

        //bloke 2 fin
        // Quitar el silencio (muted) automáticamente cuando se cargue la página
        document.addEventListener("DOMContentLoaded", function () {
            var video = document.getElementById("videoPlayer");

            // Verificar si el video está silenciado y quitar el silencio
            if (video.muted) {
                video.muted = false;
                video.play();
            }
        });
    </script>
}
<style>
    body, html {
        height: 100%;
        margin: 0;
        overflow: hidden; /* Para evitar barras de scroll */
    }

    .video-player {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background-color: #000;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
    }


    .grilla {
        width: 130%; /* Ancho del contenedor */
        display: grid;
        grid-template-columns: 15% 85%;
        height: 800px; /* Altura del contenedor, ajustable según tus necesidades */
        overflow: hidden;
        background-color: black; /* Fondo negro */
        position: relative;
    }

    .programa-container {
        width: 100%; /* Contenedor ocupa el ancho completo */
        max-height: 250px; /* Asegurar un máximo de 5 filas */
        overflow: hidden;
        background-color: black; /* Fondo negro */
        display: flex;
        flex-direction: column;
        justify-content: space-around; /* Distribuir equitativamente las filas */
        padding: 10px 0; /* Espacio entre los textos */
    }

    .programa-texto {
        position: relative;
        white-space: nowrap;
        color: white; /* Texto blanco */
        font-size: 24px; /* Ajustar según tu preferencia */
        line-height: 50px; /* Centrar el texto verticalmente */
        padding: 10px 0; /* Espaciado adicional entre filas */
    }

        .programa-texto.scrolling {
            left: 100%; /* Empieza fuera de la pantalla */
        }
</style>